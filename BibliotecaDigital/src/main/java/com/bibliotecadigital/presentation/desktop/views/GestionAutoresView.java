/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.bibliotecadigital.presentation.desktop.views;

import com.bibliotecadigital.domain.model.Autor;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel; // <-- Importante

public class GestionAutoresView extends javax.swing.JFrame implements GestionAutoresViewInterface {
     // --- Atributos de la Clase ---
    private DefaultTableModel tableModel; // El modelo de datos para nuestra tabla

    public GestionAutoresView() {
        initComponents(); // NetBeans crea los componentes visuales aquí
        configuracionAdicional(); // Nosotros los configuramos después
    }
    
    /**
     * Configuraciones adicionales que se aplican después de que NetBeans
     * crea los componentes.
     */
    private void configuracionAdicional() {
        // 1. Crear nuestro modelo de tabla personalizado
        tableModel = new DefaultTableModel(new Object[]{"ID", "Nombre"}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Hacer que las celdas no sean editables
            }
        };
        
        // 2. Conectar nuestra JTable (autoresTable) con el modelo de datos
        autoresTable.setModel(tableModel);
        
        // 3. Centrar la ventana
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPanelTabla = new javax.swing.JScrollPane();
        autoresTable = new javax.swing.JTable();
        panelBotones = new javax.swing.JPanel();
        nuevoButton = new javax.swing.JButton();
        editarButton = new javax.swing.JButton();
        eliminarButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gestion Autores");
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        autoresTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        scrollPanelTabla.setViewportView(autoresTable);

        getContentPane().add(scrollPanelTabla);

        panelBotones.setLayout(new java.awt.GridLayout());

        nuevoButton.setText("Nuevo");
        panelBotones.add(nuevoButton);

        editarButton.setText("Editar");
        panelBotones.add(editarButton);

        eliminarButton.setText("Eliminar");
        panelBotones.add(eliminarButton);

        getContentPane().add(panelBotones);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionAutoresView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionAutoresView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionAutoresView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionAutoresView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestionAutoresView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable autoresTable;
    private javax.swing.JButton editarButton;
    private javax.swing.JButton eliminarButton;
    private javax.swing.JButton nuevoButton;
    private javax.swing.JPanel panelBotones;
    private javax.swing.JScrollPane scrollPanelTabla;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addNuevoListener(ActionListener listener) {
        nuevoButton.addActionListener(listener);
    }

    @Override
    public void addEditarListener(ActionListener listener) {
        editarButton.addActionListener(listener);
    }

    @Override
    public void addEliminarListener(ActionListener listener) {
        eliminarButton.addActionListener(listener);
    }

    @Override
    public void mostrarAutores(List<Autor> autores) {
        // Limpiar la tabla antes de llenarla
        tableModel.setRowCount(0);
        
        // Llenar la tabla con los datos de los autores
        for (Autor autor : autores) {
            tableModel.addRow(new Object[]{autor.getId(), autor.getNombre()});
        }
    }

    @Override
    public void mostrarMensaje(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje);
    }

    @Override
    public Autor getAutorSeleccionado() {
        int selectedRow = autoresTable.getSelectedRow();
        if (selectedRow >= 0) {
            // Obtener los datos de la fila seleccionada
            int id = (int) tableModel.getValueAt(selectedRow, 0);
            String nombre = (String) tableModel.getValueAt(selectedRow, 1);
            return new Autor(id, nombre);
        }
        return null; // No hay ninguna fila seleccionada
    }

    @Override
    public String pedirNuevoNombreAutor(String nombreActual) {
        // Muestra un diálogo para que el usuario ingrese un nombre
        return JOptionPane.showInputDialog(this, "Ingrese el nombre del autor:", nombreActual);
    }

    @Override
    public boolean confirmarEliminacion(String nombreAutor) {
        // Muestra un diálogo de confirmación
        int respuesta = JOptionPane.showConfirmDialog(this, 
                "¿Está seguro de que desea eliminar al autor '" + nombreAutor + "'?", 
                "Confirmar Eliminación", 
                JOptionPane.YES_NO_OPTION);
        return respuesta == JOptionPane.YES_OPTION;
    }

    @Override
    public JFrame getFrame() {
         return this;
    }
}
