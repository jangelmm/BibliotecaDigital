/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.bibliotecadigital.presentation.desktop.views;

import com.bibliotecadigital.domain.model.Audio;
import com.bibliotecadigital.domain.model.Autor;
import com.bibliotecadigital.domain.model.Libro;
import com.bibliotecadigital.domain.model.MaterialBiblioteca;
import com.bibliotecadigital.domain.model.Revista;
import com.bibliotecadigital.domain.model.Video;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Diego Garcia
 */
public class GestionMaterialesView extends javax.swing.JFrame implements GestionMaterialesViewInterface {
    
    private DefaultTableModel tableModel; // El modelo de datos para nuestra tabla
    /**
     * Creates new form GestionMaterialesView
     */
    public GestionMaterialesView() {
        initComponents();
        configuracionAdicional();
    }
    
    private void configuracionAdicional() {
        // 1. Crear nuestro modelo de tabla personalizado
        tableModel = new DefaultTableModel(new Object[]{"ID", "AÃ±o", "Titulo", "Ruta de archivo", "Estado", "Autor(es)", "Tipo", "Editorial", "Num paginas", "Numero", "Duracion" ,"Formato"}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Hacer que las celdas no sean editables
            }
        };
        
        // 2. Conectar nuestra JTable (materialesTable) con el modelo de datos
        materialesTable.setModel(tableModel);
        
        // 3. Centrar la ventana
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPanelTabla = new javax.swing.JScrollPane();
        materialesTable = new javax.swing.JTable();
        nuevoButton = new javax.swing.JButton();
        editarButton = new javax.swing.JButton();
        eliminarButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        materialesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        scrollPanelTabla.setViewportView(materialesTable);

        nuevoButton.setText("Nuevo");
        nuevoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoButtonActionPerformed(evt);
            }
        });

        editarButton.setText("Editar");

        eliminarButton.setText("Eliminar");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPanelTabla, javax.swing.GroupLayout.DEFAULT_SIZE, 988, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nuevoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)
                        .addComponent(editarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(eliminarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPanelTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nuevoButton)
                    .addComponent(editarButton)
                    .addComponent(eliminarButton))
                .addGap(37, 37, 37))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nuevoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nuevoButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionMaterialesView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionMaterialesView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionMaterialesView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionMaterialesView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestionMaterialesView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton editarButton;
    private javax.swing.JButton eliminarButton;
    private javax.swing.JTable materialesTable;
    private javax.swing.JButton nuevoButton;
    private javax.swing.JScrollPane scrollPanelTabla;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addNuevoListener(ActionListener listener) {
        nuevoButton.addActionListener(listener);
    }

    @Override
    public void addEditarListener(ActionListener listener) {
        editarButton.addActionListener(listener);    }

    @Override
    public void addEliminarListener(ActionListener listener) {
        eliminarButton.addActionListener(listener);
    }

    @Override
    public void mostrarMateriales(List<MaterialBiblioteca> materiales) {
        tableModel.setRowCount(0); // limpiar tabla

        for (MaterialBiblioteca material : materiales) {
            // Convertir lista de autores a string con IDs separados por coma
            String autoresId = material.getAutores().stream()
                                       .map(a -> String.valueOf(a.getId()))
                                       .collect(Collectors.joining(","));

            String tipo = "";
            String editorial = "";
            int numPaginas = 0;
            int numero = 0;
            float duracion = 0;
            String formato = "";

            if (material instanceof Libro l) {
                tipo = "libro";
                editorial = l.getEditorial();
                numPaginas = l.getNumPaginas();
            } else if (material instanceof Revista r) {
                tipo = "revista";
                editorial = r.getEditorial();
                numero = r.getNumero();
            } else if (material instanceof Audio a) {
                tipo = "audio";
                duracion = a.getDuracion();
                formato = a.getFormato();
            } else if (material instanceof Video v) {
                tipo = "video";
                duracion = v.getDuracion();
                formato = v.getFormato();
            }

            tableModel.addRow(new Object[]{
                material.getId(),
                material.getAnio(),
                material.getTitulo(),
                material.getRutaArchivo(),
                material.isDisponible() ? "Disponible" : "No disponible",
                autoresId, // solo IDs
                tipo,
                editorial,
                numPaginas,
                numero, //.getNumero() == 0 ? "" : material.getNumero(),
                duracion, //.getDuracion() == 0f ? "" : material.getDuracion(),
                formato
            });
        }
    }

    @Override
    public void mostrarMensaje(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje);
    }

    @Override
    public MaterialBiblioteca getMaterialSeleccionado() {
        int selectedRow = materialesTable.getSelectedRow();
        if (selectedRow < 0) return null;

        int id = (int) tableModel.getValueAt(selectedRow, 0);
        int anio = (int) tableModel.getValueAt(selectedRow, 1);
        String titulo = (String) tableModel.getValueAt(selectedRow, 2);
        String rutaArchivo = (String) tableModel.getValueAt(selectedRow, 3);
        boolean disponible = "Disponible".equals(tableModel.getValueAt(selectedRow, 4));

        String autoresIdStr = (String) tableModel.getValueAt(selectedRow, 5);
        List<Autor> autores = new ArrayList<>();
        if (autoresIdStr != null && !autoresIdStr.isEmpty()) {
            for (String sId : autoresIdStr.split(",")) {
                int aId = Integer.parseInt(sId.trim());
                autores.add(new Autor(aId, "")); // solo con ID, nombre puede obtenerse de DB si quieres
            }
        }

        String tipo = (String) tableModel.getValueAt(selectedRow, 6);

        MaterialBiblioteca material = switch (tipo) {
            case "libro" -> new Libro(id, titulo, anio, rutaArchivo,
                                      (String) tableModel.getValueAt(selectedRow, 7),
                                      (int) tableModel.getValueAt(selectedRow, 8));
            case "revista" -> new Revista(id, titulo, anio, rutaArchivo,
                                          (String) tableModel.getValueAt(selectedRow, 7),
                                          (int) tableModel.getValueAt(selectedRow, 9));
            case "audio" -> new Audio(id, titulo, anio, rutaArchivo,
                                      ((Number) tableModel.getValueAt(selectedRow, 10)).floatValue(),
                                      (String) tableModel.getValueAt(selectedRow, 11));
            case "video" -> new Video(id, titulo, anio, rutaArchivo,
                                      ((Number) tableModel.getValueAt(selectedRow, 10)).floatValue(),
                                      (String) tableModel.getValueAt(selectedRow, 11));
            default -> null;
        };

        if (material != null) {
            material.setDisponible(disponible);
            autores.forEach(material::agregarAutor);
        }

        return material;
    }

    @Override
    public String pedirTipoMaterial(String tipoActual) {
         String[] opciones = {"Libro", "Revista", "Audio", "Video"};

        // Determinar la opciÃ³n inicial segÃºn el tipo actual
        int seleccionInicial = 0;
        for (int i = 0; i < opciones.length; i++) {
            if (opciones[i].equalsIgnoreCase(tipoActual)) {
                seleccionInicial = i;
                break;
            }
        }

        int seleccion = JOptionPane.showOptionDialog(
            this,
            "Seleccione el tipo de material:",
            "Tipo de material",
            JOptionPane.DEFAULT_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,
            opciones,
            opciones[seleccionInicial]
        );

        // Retorna la opciÃ³n seleccionada, o el tipoActual si cierra el diÃ¡logo
        return seleccion >= 0 ? opciones[seleccion] : tipoActual;
    }

    @Override
    public String pedirNuevoTituloMaterial(String tituloActual) {
        // Muestra un diÃ¡logo para que el usuario ingrese un titulo
        return JOptionPane.showInputDialog(this, "Ingrese el titulo del material:", tituloActual);
    }

    @Override
    public int pedirAnioMaterial(int anioActual) {
        String input = JOptionPane.showInputDialog(this, "Ingrese el aÃ±o del material:", anioActual);
        try {
            return (input == null || input.trim().isEmpty()) ? anioActual : Integer.parseInt(input.trim());
        } catch (NumberFormatException e) {
            return anioActual;
        }
    }

    @Override
    public String pedirRutaArchivo(String rutaActual) {
        String input = JOptionPane.showInputDialog(this, "Ingrese la ruta del archivo:", rutaActual);
        return (input == null || input.trim().isEmpty()) ? rutaActual : input.trim();
    }

    @Override
    public List<Integer> pedirIdsAutores() {
        String input = JOptionPane.showInputDialog(this, "Ingrese los IDs de los autores separados por comas:"); 
        if (input == null || input.trim().isEmpty()) { 
            return java.util.Collections.emptyList(); 
        }
        String[] partes = input.split(","); 
        List<Integer> ids = new java.util.ArrayList<>(); 
        for (String p : partes) { 
            ids.add(Integer.parseInt(p.trim())); 
        } 
        return ids;
    }

    @Override
    public String pedirEditorial(String editorialActual) {
        String input = JOptionPane.showInputDialog(this, "Ingrese la editorial:", editorialActual);
        return (input == null || input.trim().isEmpty()) ? editorialActual : input.trim();
    }

    @Override
    public Integer pedirNumPaginas(Integer numPaginasActual) {
        String input = JOptionPane.showInputDialog(this, "Ingrese el nÃºmero de pÃ¡ginas:", numPaginasActual);
        try {
            return (input == null || input.trim().isEmpty()) ? numPaginasActual : Integer.parseInt(input.trim());
        } catch (NumberFormatException e) {
            return numPaginasActual;
        }
    }

    @Override
    public int pedirNumero(int numeroActual) {
        String valorPorDefecto = (numeroActual == -1) ? "" : String.valueOf(numeroActual);
        String input = JOptionPane.showInputDialog(this, "Ingrese el nÃºmero de la revista:", numeroActual);
        try {
            return (input == null || input.trim().isEmpty()) ? numeroActual : Integer.parseInt(input.trim());
        } catch (NumberFormatException e) {
            return numeroActual;
        }
    }

    @Override
    public float pedirDuracion(float duracionActual) {
        String input = JOptionPane.showInputDialog(this, "Ingrese la duraciÃ³n (en minutos):", duracionActual);
        try {
            return (input == null || input.trim().isEmpty()) ? duracionActual : Float.parseFloat(input.trim());
        } catch (NumberFormatException e) {
            return duracionActual;
        }
    }

    @Override
    public String pedirFormato(String formatoActual) {
        String input = JOptionPane.showInputDialog(this, "Ingrese el formato:", formatoActual);
        return (input == null || input.trim().isEmpty()) ? formatoActual : input.trim();
    }

    public boolean pedirEstadoMaterial(boolean estadoActual) {
        // Opciones a mostrar
        String[] opciones = {"SÃ­", "No"};

        // Determinar opciÃ³n inicial segÃºn el estado actual
        int seleccionInicial = estadoActual ? 0 : 1;

        // Mostrar el cuadro de diÃ¡logo con opciones
        int seleccion = JOptionPane.showOptionDialog(
            this,
            "Seleccione el estado del material,  Â¿esta disponible?:",
            "Estado del material",
            JOptionPane.DEFAULT_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,
            opciones,
            opciones[seleccionInicial]
        );

        // Retorna true si selecciona "SÃ­", false si selecciona "No" o cierra el diÃ¡logo
        return seleccion == 0;
    }
    
    @Override
    public boolean confirmarEliminacion(String tituloMaterial) {
        // Muestra un diÃ¡logo de confirmaciÃ³n
        int respuesta = JOptionPane.showConfirmDialog(this, 
                "Â¿EstÃ¡ seguro de que desea eliminar el material '" + tituloMaterial + "'?", 
                "Confirmar EliminaciÃ³n", 
                JOptionPane.YES_NO_OPTION);
        return respuesta == JOptionPane.YES_OPTION;
    }

    @Override
    public JFrame getFrame() {
        return this;
    }
}
